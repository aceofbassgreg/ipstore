This is an app that stores IP addresses. It was a problem given to me for educational purposes,
and part of the problem set-up was the tests.rb file residing in the IPstore/test directory. My goal
is to use TDD and let the tests dictate where this app is headed. Once I have passing tests, I will refactor
and add anything else that is essential for this program to run effectively.

3/25 update
An interesting hurdle I just overcame dealt with routing. Basically:  I used named routes per the problem set-up, but in doing so created non-RESTful resources. In other words, I didn't have HTTP requests associated with my routes, and so whenever I 
ran the test file, my controller actions never functioned. After much Stack Overflow research and a visit to 
Rails Routing from the Outside In, I realized I could associate HTTP verbs with named routes.

Another issue I've had so far is wondering a) if there should be views, and b) how to obtain the IP addresses?
I've realized that views are probably a bad idea, given that the test picks up all HTML from a page and this causes
the test(s) to fail. Then the question is, how to obtain IP addresses? 

Once the routing was properly set up, I had the advantage of reading the Rails Server log to see what exactly was happening with the http requests in the tests. This helped big-time, especially regarding setting up the "def create" action (which is still in progress). By running "puts params" under def create, I at least knew that I could access the IP addresses with 
params[:json].

3/26 update
An issue I had was getting the 'add' test to pass. To make a long story short:  my def create action was fine all along, but I didn't realize that the test was checking what was entered via def create against what was then retrieved with def index. Many lessons learned here, such as "really know what the test is doing"!

3/27 (Final) update

My last two issues that I haven't resoved are:

1) I'm still allowing duplicates. I was trying to add conditional logic to my .each block in def create (which later would have been refactored) but I couldn't get it to pass the additional test I made. It dawned on me that there may be a way to use model validation, but instead of throwing an error just skipping that entry. I'll research this before tomorrow.

2) I haven't been able to get the def show action to work. I realize that :ip makes for a dynamic route, and I also realize that it has dots in it and therefore needs some secret sauce to function. Suffice it to say, I have not found that secret sauce.